# 中国大陆优化版本的Dockerfile
# 使用多个镜像源提高成功率

# 第一选择：阿里云镜像
FROM registry.cn-hangzhou.aliyuncs.com/library/node:20-alpine AS base

# 备用选择（如果上面失败，手动修改）
# FROM registry.cn-beijing.aliyuncs.com/library/node:20-alpine AS base
# FROM registry.cn-shenzhen.aliyuncs.com/library/node:20-alpine AS base
# FROM node:20-alpine AS base

# 设置环境变量
ENV NODE_ENV=production
ENV NPM_CONFIG_REGISTRY=https://registry.npmmirror.com/
ENV YARN_REGISTRY=https://registry.npmmirror.com/

# 替换Alpine镜像源为阿里云
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/latest-stable/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/latest-stable/community" >> /etc/apk/repositories

# 配置npm镜像源
RUN npm config set registry https://registry.npmmirror.com/ && \
    npm config set disturl https://npmmirror.com/dist && \
    npm config set electron_mirror https://npmmirror.com/mirrors/electron/ && \
    npm config set sass_binary_site https://npmmirror.com/mirrors/node-sass/ && \
    npm config set phantomjs_cdnurl https://npmmirror.com/mirrors/phantomjs/ && \
    npm config set chromedriver_cdnurl https://npmmirror.com/mirrors/chromedriver/ && \
    npm config set operadriver_cdnurl https://npmmirror.com/mirrors/operadriver/ && \
    npm config set fse_binary_host_mirror https://npmmirror.com/mirrors/fsevents

# 安装系统依赖
RUN apk update --no-cache && apk add --no-cache \
    curl \
    wget \
    git \
    bash \
    tzdata \
    ca-certificates \
    python3 \
    make \
    g++ \
    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo "Asia/Shanghai" > /etc/timezone \
    && apk del tzdata \
    && rm -rf /var/cache/apk/*

# 构建阶段
FROM base AS builder
WORKDIR /app

# 复制package文件
COPY package*.json ./

# 设置npm超时和重试
RUN npm config set fetch-timeout 600000 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 5

# 清理缓存并安装依赖
RUN npm cache clean --force && \
    npm ci --registry=https://registry.npmmirror.com/ \
           --no-audit \
           --no-fund \
           --prefer-offline \
           --no-optional || \
    # 如果失败，尝试使用yarn
    (npm install -g yarn --registry=https://registry.npmmirror.com/ && \
     yarn config set registry https://registry.npmmirror.com/ && \
     yarn install --frozen-lockfile --network-timeout 600000) || \
    # 最后尝试使用cnpm
    (npm install -g cnpm --registry=https://registry.npmmirror.com/ && \
     cnpm install)

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# 生产阶段
FROM base AS runner
WORKDIR /app
ENV NODE_ENV=production

# 添加非root用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 复制构建产物和必要文件
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# 创建数据目录并设置权限
RUN mkdir -p /app/data/uploads && \
    chown -R nextjs:nodejs /app/data

# 复制初始数据文件（如果存在）
COPY --from=builder --chown=nextjs:nodejs /app/data/*.yml /app/data/ 2>/dev/null || true

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

# 设置环境变量
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 健康检查（使用curl而不是wget，更可靠）
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# 启动命令
CMD ["node", "server.js"]
